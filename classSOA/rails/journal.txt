2013.10.10
1.CRUD指的是Create(新增)、Read(讀取)、Update(更新)、Delete(刪除)四種操作資料的基本方式。
2.首先請打開一個命令列視窗(Terminal)，然後找個目錄適合放你的Rails專案，就說是projects好了：
$ mkdir projects 
$ cd projects 
3.接著，輸入以下指令就會建立一個叫做demo的Rails專案：
$ rails new demo
Gemfile 設定Rails應用程式會使用哪些Gems套件 
README 專案說明：你可以用來告訴其他人你的應用程式是做什麼用的，如何使用等等。 
Rakefile 用來載入可以被命令列執行的一些Rake任務 
app/ 放Controllers、Models和Views檔案，接下來的內容主要都在這個目錄。 
config/ 應用程式設定檔、路由規則、資料庫設定等等 
config.ru 用來啟動應用程式的Rack伺服器設定檔 
db/ 資料庫的結構綱要 
doc/ 用來放你的文件 
lib/ 放一些自定的Module和類別檔案 
log/ 應用程式的Log記錄檔 
public/ 唯一可以在網路上看到的目錄，這是你的圖檔、JavaScript、CSS和其他靜態檔案擺放的地方 
script/ 放rails這個指令和放其他的script指令 
test/ 單元測試、fixtures及整合測試等程式 
tmp/ 暫時性的檔案 
vendor/ 用來放第三方程式碼外掛的目錄
2013.10.11
1.Rails使用了一套叫做Bundler的工具可以幫助我們檢查及安裝這個Rails應用程式所有依存的套件，請輸入： 
$ bundle install 
可以只輸入bundle就是bundle install了
每次有修改Gemfile這個檔案，都需要重新執行bundle
2.在開發用的電腦上，我們不需要安裝如Apache、IIS的網站伺服器。Ruby本身就有提供了HTTP伺服器可以執行Rails，要啟動它，我們另開啟一個指令視窗，cd進到剛剛建立的Rails專案目錄然後輸入:
$ rails server
2013.10.13
1.Rails的資料庫設定檔是config/database.yml，如果你打開這個檔案，預設的設定是SQLite3。這個檔案裡包含三段不同環境的設定，對應到三個Rails執行環境：
development 開發模式，用在你的開發的時候
test 測試模式，用在執行自動測試時
production 正式上線模式，用在實際的上線運作環境Migration的用途是建立和修改資料庫資料表。
rails generate migration creat_movies
2.rake db:migrate
3.rake db:rollback 回到上一個
4.rails console = irb
5.把資料庫新增之後 rake  (資料庫名稱 ) 
rails c 
Movie.all (看movie裡面的資料)
6.課本4.3在教資料庫的新增刪除更新
7.出現 ActiveModel::MassAssignmentSecurity::Error 錯誤？ 修改 config/application.rb 的 config.active_record.whitelist_attributes 設定為 false
8.擴充Template Handler
Rails預設只有內建ERb和Builder這兩套樣板引擎，但要擴充非常容易。例如在Rails社群中，也很流行用HAML這套樣板引擎來取代ERb。HAML是一套利用縮排技術簡化HTML撰寫的格式
2013.10.18
1.如果要偵測error可以利用RASP方法
Read Ask Search Post
2.可以看log/development.log去看裡面的error狀況
3.另一種方法是insert instrumentation
=debug(@movie) or =@movie.inspect
ex. raise params.inspect 
logger.debug (message)
rails server --debugger
2013.10.19
1.form_tag 連http的method，利用rake routes可看到
2.params這個表格
3.redirect_to 到某個地方
2013.10.31 
http://pastebin.com/WbA2ArgW
facebook guideline-how to facebook log in
#Add OmniAuth OAuth to Gemfile:
gem 'omniauth'
gem 'omniauth-facebook' 
#Run the bundle command to install it.
bundle install
# Add the Devise option :omniauthable to your Moviegoer model (app/models/moviegoer.rb) devise :database_authenticatable, :registerable, :omniauthable, :omniauth_providers => [:facebook],
        :recoverable, :rememberable, :trackable, :validatable 
#Add columns "provider", "uid" and "name" to your Moviegoer model.
rails g migration AddColumnsToMoviegoers provider uid name
rake db:migrate
#Add :provider, :uid, :name to moviegoer.rb
attr_accessible :provider, :uid, :name
# Edit the Devise config file with your credentials in /config/initializers/devise.rb
# The APP_ID & APP_SECRET you will get it from Facebook developer  https://developers.facebook.com
# Guide picture:  http://i.imgur.com/7Qe7JQE.png
require "omniauth-facebook"
config.omniauth :facebook, "APP_ID", "APP_SECRET"
#Add this in routes.rb , and delete all the other devise_for
devise_for :moviegoers, :controllers => { :omniauth_callbacks => "moviegoers/omniauth_callbacks" }
#Now we just add the file "app/controllers/moviegoers/omniauth_callbacks_controller.rb"
class Moviegoers::OmniauthCallbacksController < Devise::OmniauthCallbacksController
  def facebook
    # You need to implement the method below in your model (e.g. app/models/moviegoer.rb)
    @moviegoer = Moviegoer.find_for_facebook_oauth(request.env["omniauth.auth"], current_moviegoer) 
    if @moviegoer.persisted?
      sign_in_and_redirect @moviegoer, :event => :authentication #this will throw if @moviegoer is not activated
      set_flash_message(:notice, :success, :kind => "Facebook") if is_navigational_format?
    else
      session["devise.facebook_data"] = request.env["omniauth.auth"]
      redirect_to new_moviegoer_registration_url
    end
  end
end
#After the controller is defined, we need to implement the find_for_facebook_oauth method in our model (e.g. app/models/moviegoer.rb):
#This method simply tries to find an existing moviegoer by uid or create one with a random password otherwise. 
def self.find_for_facebook_oauth(auth, signed_in_resource=nil)
  moviegoer = Moviegoer.where(:provider => auth.provider, :uid => auth.uid).first
  unless moviegoer
    moviegoer = Moviegoer.create(name:auth.extra.raw_info.name,
                         provider:auth.provider,
                         uid:auth.uid,
                         email:auth.info.email,
                         password:Devise.friendly_token[0,20]
                         )
  end
  moviegoer
 end
 def self.new_with_session(params, session)
    super.tap do |moviegoer|
      if data = session["devise.facebook_data"] && session["devise.facebook_data"]["extra"]["raw_info"]
        moviegoer.email = data["email"] if moviegoer.email.blank?
      end
    end
  end
2013.11.1
如何把facebook的帳號密碼不會上傳到github
用nano編輯
找到"ls -al"再裡面新增你要忽略的那個檔案的路徑
這樣可以上傳的時候不會上傳那個檔案

